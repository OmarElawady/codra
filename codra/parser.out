Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> DATA program
Rule 2     program -> construct program
Rule 3     program -> <empty>
Rule 4     construct -> expression
Rule 5     construct -> IF expression program ENDIF
Rule 6     construct -> FOR ID IN expression program ENDFOR
Rule 7     construct -> FOR ID , ids IN expression program ENDFOR
Rule 8     expression -> expression . ID
Rule 9     expression -> ID
Rule 10    ids -> ID
Rule 11    ids -> ids , ID
Rule 12    expression -> expression [ expression ]
Rule 13    expression -> expression + expression
Rule 14    expression -> expression - expression
Rule 15    expression -> expression * expression
Rule 16    expression -> expression / expression
Rule 17    expression -> expression AND expression
Rule 18    expression -> expression OR expression
Rule 19    expression -> NOT expression
Rule 20    expression -> expression % expression
Rule 21    expression -> NUMBER
Rule 22    expression -> STRING
Rule 23    expression -> expression EQ expression
Rule 24    expression -> expression NEQ expression
Rule 25    expression -> expression GT expression
Rule 26    expression -> expression LT expression
Rule 27    expression -> expression GE expression
Rule 28    expression -> expression LE expression
Rule 29    expression -> expression ( )
Rule 30    expression -> expression ( params )
Rule 31    params -> param
Rule 32    params -> params , param
Rule 33    param -> expression

Terminals, with rules where they appear

%                    : 20
(                    : 29 30
)                    : 29 30
*                    : 15
+                    : 13
,                    : 7 11 32
-                    : 14
.                    : 8
/                    : 16
AND                  : 17
DATA                 : 1
ENDFOR               : 6 7
ENDIF                : 5
EQ                   : 23
FOR                  : 6 7
GE                   : 27
GT                   : 25
ID                   : 6 7 8 9 10 11
IF                   : 5
IN                   : 6 7
LE                   : 28
LT                   : 26
NEQ                  : 24
NOT                  : 19
NUMBER               : 21
OR                   : 18
STRING               : 22
[                    : 12
]                    : 12
error                : 

Nonterminals, with rules where they appear

construct            : 2
expression           : 4 5 6 7 8 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 20 20 23 23 24 24 25 25 26 26 27 27 28 28 29 30 33
ids                  : 7 11
param                : 31 32
params               : 30 32
program              : 1 2 5 6 7 0

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . DATA program
    (2) program -> . construct program
    (3) program -> .
    (4) construct -> . expression
    (5) construct -> . IF expression program ENDIF
    (6) construct -> . FOR ID IN expression program ENDFOR
    (7) construct -> . FOR ID , ids IN expression program ENDFOR
    (8) expression -> . expression . ID
    (9) expression -> . ID
    (12) expression -> . expression [ expression ]
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression AND expression
    (18) expression -> . expression OR expression
    (19) expression -> . NOT expression
    (20) expression -> . expression % expression
    (21) expression -> . NUMBER
    (22) expression -> . STRING
    (23) expression -> . expression EQ expression
    (24) expression -> . expression NEQ expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LE expression
    (29) expression -> . expression ( )
    (30) expression -> . expression ( params )

    DATA            shift and go to state 2
    $end            reduce using rule 3 (program -> .)
    IF              shift and go to state 5
    FOR             shift and go to state 6
    ID              shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    STRING          shift and go to state 10

    program                        shift and go to state 1
    construct                      shift and go to state 3
    expression                     shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> DATA . program
    (1) program -> . DATA program
    (2) program -> . construct program
    (3) program -> .
    (4) construct -> . expression
    (5) construct -> . IF expression program ENDIF
    (6) construct -> . FOR ID IN expression program ENDFOR
    (7) construct -> . FOR ID , ids IN expression program ENDFOR
    (8) expression -> . expression . ID
    (9) expression -> . ID
    (12) expression -> . expression [ expression ]
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression AND expression
    (18) expression -> . expression OR expression
    (19) expression -> . NOT expression
    (20) expression -> . expression % expression
    (21) expression -> . NUMBER
    (22) expression -> . STRING
    (23) expression -> . expression EQ expression
    (24) expression -> . expression NEQ expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LE expression
    (29) expression -> . expression ( )
    (30) expression -> . expression ( params )

    DATA            shift and go to state 2
    $end            reduce using rule 3 (program -> .)
    ENDIF           reduce using rule 3 (program -> .)
    ENDFOR          reduce using rule 3 (program -> .)
    IF              shift and go to state 5
    FOR             shift and go to state 6
    ID              shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    STRING          shift and go to state 10

    program                        shift and go to state 11
    construct                      shift and go to state 3
    expression                     shift and go to state 4

state 3

    (2) program -> construct . program
    (1) program -> . DATA program
    (2) program -> . construct program
    (3) program -> .
    (4) construct -> . expression
    (5) construct -> . IF expression program ENDIF
    (6) construct -> . FOR ID IN expression program ENDFOR
    (7) construct -> . FOR ID , ids IN expression program ENDFOR
    (8) expression -> . expression . ID
    (9) expression -> . ID
    (12) expression -> . expression [ expression ]
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression AND expression
    (18) expression -> . expression OR expression
    (19) expression -> . NOT expression
    (20) expression -> . expression % expression
    (21) expression -> . NUMBER
    (22) expression -> . STRING
    (23) expression -> . expression EQ expression
    (24) expression -> . expression NEQ expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LE expression
    (29) expression -> . expression ( )
    (30) expression -> . expression ( params )

    DATA            shift and go to state 2
    $end            reduce using rule 3 (program -> .)
    ENDIF           reduce using rule 3 (program -> .)
    ENDFOR          reduce using rule 3 (program -> .)
    IF              shift and go to state 5
    FOR             shift and go to state 6
    ID              shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    STRING          shift and go to state 10

    construct                      shift and go to state 3
    program                        shift and go to state 12
    expression                     shift and go to state 4

state 4

    (4) construct -> expression .
    (8) expression -> expression . . ID
    (12) expression -> expression . [ expression ]
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . AND expression
    (18) expression -> expression . OR expression
    (20) expression -> expression . % expression
    (23) expression -> expression . EQ expression
    (24) expression -> expression . NEQ expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LE expression
    (29) expression -> expression . ( )
    (30) expression -> expression . ( params )

    DATA            reduce using rule 4 (construct -> expression .)
    IF              reduce using rule 4 (construct -> expression .)
    FOR             reduce using rule 4 (construct -> expression .)
    ID              reduce using rule 4 (construct -> expression .)
    NOT             reduce using rule 4 (construct -> expression .)
    NUMBER          reduce using rule 4 (construct -> expression .)
    STRING          reduce using rule 4 (construct -> expression .)
    $end            reduce using rule 4 (construct -> expression .)
    ENDIF           reduce using rule 4 (construct -> expression .)
    ENDFOR          reduce using rule 4 (construct -> expression .)
    .               shift and go to state 13
    [               shift and go to state 14
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18
    AND             shift and go to state 19
    OR              shift and go to state 20
    %               shift and go to state 21
    EQ              shift and go to state 22
    NEQ             shift and go to state 23
    GT              shift and go to state 24
    LT              shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    (               shift and go to state 28


state 5

    (5) construct -> IF . expression program ENDIF
    (8) expression -> . expression . ID
    (9) expression -> . ID
    (12) expression -> . expression [ expression ]
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression AND expression
    (18) expression -> . expression OR expression
    (19) expression -> . NOT expression
    (20) expression -> . expression % expression
    (21) expression -> . NUMBER
    (22) expression -> . STRING
    (23) expression -> . expression EQ expression
    (24) expression -> . expression NEQ expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LE expression
    (29) expression -> . expression ( )
    (30) expression -> . expression ( params )

    ID              shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 29

state 6

    (6) construct -> FOR . ID IN expression program ENDFOR
    (7) construct -> FOR . ID , ids IN expression program ENDFOR

    ID              shift and go to state 30


state 7

    (9) expression -> ID .

    .               reduce using rule 9 (expression -> ID .)
    [               reduce using rule 9 (expression -> ID .)
    +               reduce using rule 9 (expression -> ID .)
    -               reduce using rule 9 (expression -> ID .)
    *               reduce using rule 9 (expression -> ID .)
    /               reduce using rule 9 (expression -> ID .)
    AND             reduce using rule 9 (expression -> ID .)
    OR              reduce using rule 9 (expression -> ID .)
    %               reduce using rule 9 (expression -> ID .)
    EQ              reduce using rule 9 (expression -> ID .)
    NEQ             reduce using rule 9 (expression -> ID .)
    GT              reduce using rule 9 (expression -> ID .)
    LT              reduce using rule 9 (expression -> ID .)
    GE              reduce using rule 9 (expression -> ID .)
    LE              reduce using rule 9 (expression -> ID .)
    (               reduce using rule 9 (expression -> ID .)
    DATA            reduce using rule 9 (expression -> ID .)
    IF              reduce using rule 9 (expression -> ID .)
    FOR             reduce using rule 9 (expression -> ID .)
    ID              reduce using rule 9 (expression -> ID .)
    NOT             reduce using rule 9 (expression -> ID .)
    NUMBER          reduce using rule 9 (expression -> ID .)
    STRING          reduce using rule 9 (expression -> ID .)
    $end            reduce using rule 9 (expression -> ID .)
    ENDIF           reduce using rule 9 (expression -> ID .)
    ENDFOR          reduce using rule 9 (expression -> ID .)
    ]               reduce using rule 9 (expression -> ID .)
    )               reduce using rule 9 (expression -> ID .)
    ,               reduce using rule 9 (expression -> ID .)


state 8

    (19) expression -> NOT . expression
    (8) expression -> . expression . ID
    (9) expression -> . ID
    (12) expression -> . expression [ expression ]
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression AND expression
    (18) expression -> . expression OR expression
    (19) expression -> . NOT expression
    (20) expression -> . expression % expression
    (21) expression -> . NUMBER
    (22) expression -> . STRING
    (23) expression -> . expression EQ expression
    (24) expression -> . expression NEQ expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LE expression
    (29) expression -> . expression ( )
    (30) expression -> . expression ( params )

    ID              shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 31

state 9

    (21) expression -> NUMBER .

    .               reduce using rule 21 (expression -> NUMBER .)
    [               reduce using rule 21 (expression -> NUMBER .)
    +               reduce using rule 21 (expression -> NUMBER .)
    -               reduce using rule 21 (expression -> NUMBER .)
    *               reduce using rule 21 (expression -> NUMBER .)
    /               reduce using rule 21 (expression -> NUMBER .)
    AND             reduce using rule 21 (expression -> NUMBER .)
    OR              reduce using rule 21 (expression -> NUMBER .)
    %               reduce using rule 21 (expression -> NUMBER .)
    EQ              reduce using rule 21 (expression -> NUMBER .)
    NEQ             reduce using rule 21 (expression -> NUMBER .)
    GT              reduce using rule 21 (expression -> NUMBER .)
    LT              reduce using rule 21 (expression -> NUMBER .)
    GE              reduce using rule 21 (expression -> NUMBER .)
    LE              reduce using rule 21 (expression -> NUMBER .)
    (               reduce using rule 21 (expression -> NUMBER .)
    DATA            reduce using rule 21 (expression -> NUMBER .)
    IF              reduce using rule 21 (expression -> NUMBER .)
    FOR             reduce using rule 21 (expression -> NUMBER .)
    ID              reduce using rule 21 (expression -> NUMBER .)
    NOT             reduce using rule 21 (expression -> NUMBER .)
    NUMBER          reduce using rule 21 (expression -> NUMBER .)
    STRING          reduce using rule 21 (expression -> NUMBER .)
    $end            reduce using rule 21 (expression -> NUMBER .)
    ENDIF           reduce using rule 21 (expression -> NUMBER .)
    ENDFOR          reduce using rule 21 (expression -> NUMBER .)
    ]               reduce using rule 21 (expression -> NUMBER .)
    )               reduce using rule 21 (expression -> NUMBER .)
    ,               reduce using rule 21 (expression -> NUMBER .)


state 10

    (22) expression -> STRING .

    .               reduce using rule 22 (expression -> STRING .)
    [               reduce using rule 22 (expression -> STRING .)
    +               reduce using rule 22 (expression -> STRING .)
    -               reduce using rule 22 (expression -> STRING .)
    *               reduce using rule 22 (expression -> STRING .)
    /               reduce using rule 22 (expression -> STRING .)
    AND             reduce using rule 22 (expression -> STRING .)
    OR              reduce using rule 22 (expression -> STRING .)
    %               reduce using rule 22 (expression -> STRING .)
    EQ              reduce using rule 22 (expression -> STRING .)
    NEQ             reduce using rule 22 (expression -> STRING .)
    GT              reduce using rule 22 (expression -> STRING .)
    LT              reduce using rule 22 (expression -> STRING .)
    GE              reduce using rule 22 (expression -> STRING .)
    LE              reduce using rule 22 (expression -> STRING .)
    (               reduce using rule 22 (expression -> STRING .)
    DATA            reduce using rule 22 (expression -> STRING .)
    IF              reduce using rule 22 (expression -> STRING .)
    FOR             reduce using rule 22 (expression -> STRING .)
    ID              reduce using rule 22 (expression -> STRING .)
    NOT             reduce using rule 22 (expression -> STRING .)
    NUMBER          reduce using rule 22 (expression -> STRING .)
    STRING          reduce using rule 22 (expression -> STRING .)
    $end            reduce using rule 22 (expression -> STRING .)
    ENDIF           reduce using rule 22 (expression -> STRING .)
    ENDFOR          reduce using rule 22 (expression -> STRING .)
    ]               reduce using rule 22 (expression -> STRING .)
    )               reduce using rule 22 (expression -> STRING .)
    ,               reduce using rule 22 (expression -> STRING .)


state 11

    (1) program -> DATA program .

    $end            reduce using rule 1 (program -> DATA program .)
    ENDIF           reduce using rule 1 (program -> DATA program .)
    ENDFOR          reduce using rule 1 (program -> DATA program .)


state 12

    (2) program -> construct program .

    $end            reduce using rule 2 (program -> construct program .)
    ENDIF           reduce using rule 2 (program -> construct program .)
    ENDFOR          reduce using rule 2 (program -> construct program .)


state 13

    (8) expression -> expression . . ID

    ID              shift and go to state 32


state 14

    (12) expression -> expression [ . expression ]
    (8) expression -> . expression . ID
    (9) expression -> . ID
    (12) expression -> . expression [ expression ]
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression AND expression
    (18) expression -> . expression OR expression
    (19) expression -> . NOT expression
    (20) expression -> . expression % expression
    (21) expression -> . NUMBER
    (22) expression -> . STRING
    (23) expression -> . expression EQ expression
    (24) expression -> . expression NEQ expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LE expression
    (29) expression -> . expression ( )
    (30) expression -> . expression ( params )

    ID              shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 33

state 15

    (13) expression -> expression + . expression
    (8) expression -> . expression . ID
    (9) expression -> . ID
    (12) expression -> . expression [ expression ]
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression AND expression
    (18) expression -> . expression OR expression
    (19) expression -> . NOT expression
    (20) expression -> . expression % expression
    (21) expression -> . NUMBER
    (22) expression -> . STRING
    (23) expression -> . expression EQ expression
    (24) expression -> . expression NEQ expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LE expression
    (29) expression -> . expression ( )
    (30) expression -> . expression ( params )

    ID              shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 34

state 16

    (14) expression -> expression - . expression
    (8) expression -> . expression . ID
    (9) expression -> . ID
    (12) expression -> . expression [ expression ]
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression AND expression
    (18) expression -> . expression OR expression
    (19) expression -> . NOT expression
    (20) expression -> . expression % expression
    (21) expression -> . NUMBER
    (22) expression -> . STRING
    (23) expression -> . expression EQ expression
    (24) expression -> . expression NEQ expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LE expression
    (29) expression -> . expression ( )
    (30) expression -> . expression ( params )

    ID              shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 35

state 17

    (15) expression -> expression * . expression
    (8) expression -> . expression . ID
    (9) expression -> . ID
    (12) expression -> . expression [ expression ]
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression AND expression
    (18) expression -> . expression OR expression
    (19) expression -> . NOT expression
    (20) expression -> . expression % expression
    (21) expression -> . NUMBER
    (22) expression -> . STRING
    (23) expression -> . expression EQ expression
    (24) expression -> . expression NEQ expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LE expression
    (29) expression -> . expression ( )
    (30) expression -> . expression ( params )

    ID              shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 36

state 18

    (16) expression -> expression / . expression
    (8) expression -> . expression . ID
    (9) expression -> . ID
    (12) expression -> . expression [ expression ]
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression AND expression
    (18) expression -> . expression OR expression
    (19) expression -> . NOT expression
    (20) expression -> . expression % expression
    (21) expression -> . NUMBER
    (22) expression -> . STRING
    (23) expression -> . expression EQ expression
    (24) expression -> . expression NEQ expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LE expression
    (29) expression -> . expression ( )
    (30) expression -> . expression ( params )

    ID              shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 37

state 19

    (17) expression -> expression AND . expression
    (8) expression -> . expression . ID
    (9) expression -> . ID
    (12) expression -> . expression [ expression ]
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression AND expression
    (18) expression -> . expression OR expression
    (19) expression -> . NOT expression
    (20) expression -> . expression % expression
    (21) expression -> . NUMBER
    (22) expression -> . STRING
    (23) expression -> . expression EQ expression
    (24) expression -> . expression NEQ expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LE expression
    (29) expression -> . expression ( )
    (30) expression -> . expression ( params )

    ID              shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 38

state 20

    (18) expression -> expression OR . expression
    (8) expression -> . expression . ID
    (9) expression -> . ID
    (12) expression -> . expression [ expression ]
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression AND expression
    (18) expression -> . expression OR expression
    (19) expression -> . NOT expression
    (20) expression -> . expression % expression
    (21) expression -> . NUMBER
    (22) expression -> . STRING
    (23) expression -> . expression EQ expression
    (24) expression -> . expression NEQ expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LE expression
    (29) expression -> . expression ( )
    (30) expression -> . expression ( params )

    ID              shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 39

state 21

    (20) expression -> expression % . expression
    (8) expression -> . expression . ID
    (9) expression -> . ID
    (12) expression -> . expression [ expression ]
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression AND expression
    (18) expression -> . expression OR expression
    (19) expression -> . NOT expression
    (20) expression -> . expression % expression
    (21) expression -> . NUMBER
    (22) expression -> . STRING
    (23) expression -> . expression EQ expression
    (24) expression -> . expression NEQ expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LE expression
    (29) expression -> . expression ( )
    (30) expression -> . expression ( params )

    ID              shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 40

state 22

    (23) expression -> expression EQ . expression
    (8) expression -> . expression . ID
    (9) expression -> . ID
    (12) expression -> . expression [ expression ]
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression AND expression
    (18) expression -> . expression OR expression
    (19) expression -> . NOT expression
    (20) expression -> . expression % expression
    (21) expression -> . NUMBER
    (22) expression -> . STRING
    (23) expression -> . expression EQ expression
    (24) expression -> . expression NEQ expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LE expression
    (29) expression -> . expression ( )
    (30) expression -> . expression ( params )

    ID              shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 41

state 23

    (24) expression -> expression NEQ . expression
    (8) expression -> . expression . ID
    (9) expression -> . ID
    (12) expression -> . expression [ expression ]
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression AND expression
    (18) expression -> . expression OR expression
    (19) expression -> . NOT expression
    (20) expression -> . expression % expression
    (21) expression -> . NUMBER
    (22) expression -> . STRING
    (23) expression -> . expression EQ expression
    (24) expression -> . expression NEQ expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LE expression
    (29) expression -> . expression ( )
    (30) expression -> . expression ( params )

    ID              shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 42

state 24

    (25) expression -> expression GT . expression
    (8) expression -> . expression . ID
    (9) expression -> . ID
    (12) expression -> . expression [ expression ]
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression AND expression
    (18) expression -> . expression OR expression
    (19) expression -> . NOT expression
    (20) expression -> . expression % expression
    (21) expression -> . NUMBER
    (22) expression -> . STRING
    (23) expression -> . expression EQ expression
    (24) expression -> . expression NEQ expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LE expression
    (29) expression -> . expression ( )
    (30) expression -> . expression ( params )

    ID              shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 43

state 25

    (26) expression -> expression LT . expression
    (8) expression -> . expression . ID
    (9) expression -> . ID
    (12) expression -> . expression [ expression ]
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression AND expression
    (18) expression -> . expression OR expression
    (19) expression -> . NOT expression
    (20) expression -> . expression % expression
    (21) expression -> . NUMBER
    (22) expression -> . STRING
    (23) expression -> . expression EQ expression
    (24) expression -> . expression NEQ expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LE expression
    (29) expression -> . expression ( )
    (30) expression -> . expression ( params )

    ID              shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 44

state 26

    (27) expression -> expression GE . expression
    (8) expression -> . expression . ID
    (9) expression -> . ID
    (12) expression -> . expression [ expression ]
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression AND expression
    (18) expression -> . expression OR expression
    (19) expression -> . NOT expression
    (20) expression -> . expression % expression
    (21) expression -> . NUMBER
    (22) expression -> . STRING
    (23) expression -> . expression EQ expression
    (24) expression -> . expression NEQ expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LE expression
    (29) expression -> . expression ( )
    (30) expression -> . expression ( params )

    ID              shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 45

state 27

    (28) expression -> expression LE . expression
    (8) expression -> . expression . ID
    (9) expression -> . ID
    (12) expression -> . expression [ expression ]
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression AND expression
    (18) expression -> . expression OR expression
    (19) expression -> . NOT expression
    (20) expression -> . expression % expression
    (21) expression -> . NUMBER
    (22) expression -> . STRING
    (23) expression -> . expression EQ expression
    (24) expression -> . expression NEQ expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LE expression
    (29) expression -> . expression ( )
    (30) expression -> . expression ( params )

    ID              shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 46

state 28

    (29) expression -> expression ( . )
    (30) expression -> expression ( . params )
    (31) params -> . param
    (32) params -> . params , param
    (33) param -> . expression
    (8) expression -> . expression . ID
    (9) expression -> . ID
    (12) expression -> . expression [ expression ]
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression AND expression
    (18) expression -> . expression OR expression
    (19) expression -> . NOT expression
    (20) expression -> . expression % expression
    (21) expression -> . NUMBER
    (22) expression -> . STRING
    (23) expression -> . expression EQ expression
    (24) expression -> . expression NEQ expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LE expression
    (29) expression -> . expression ( )
    (30) expression -> . expression ( params )

    )               shift and go to state 48
    ID              shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 47
    params                         shift and go to state 49
    param                          shift and go to state 50

state 29

    (5) construct -> IF expression . program ENDIF
    (8) expression -> expression . . ID
    (12) expression -> expression . [ expression ]
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . AND expression
    (18) expression -> expression . OR expression
    (20) expression -> expression . % expression
    (23) expression -> expression . EQ expression
    (24) expression -> expression . NEQ expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LE expression
    (29) expression -> expression . ( )
    (30) expression -> expression . ( params )
    (1) program -> . DATA program
    (2) program -> . construct program
    (3) program -> .
    (4) construct -> . expression
    (5) construct -> . IF expression program ENDIF
    (6) construct -> . FOR ID IN expression program ENDFOR
    (7) construct -> . FOR ID , ids IN expression program ENDFOR
    (8) expression -> . expression . ID
    (9) expression -> . ID
    (12) expression -> . expression [ expression ]
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression AND expression
    (18) expression -> . expression OR expression
    (19) expression -> . NOT expression
    (20) expression -> . expression % expression
    (21) expression -> . NUMBER
    (22) expression -> . STRING
    (23) expression -> . expression EQ expression
    (24) expression -> . expression NEQ expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LE expression
    (29) expression -> . expression ( )
    (30) expression -> . expression ( params )

    .               shift and go to state 13
    [               shift and go to state 14
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18
    AND             shift and go to state 19
    OR              shift and go to state 20
    %               shift and go to state 21
    EQ              shift and go to state 22
    NEQ             shift and go to state 23
    GT              shift and go to state 24
    LT              shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    (               shift and go to state 28
    DATA            shift and go to state 2
    ENDIF           reduce using rule 3 (program -> .)
    IF              shift and go to state 5
    FOR             shift and go to state 6
    ID              shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 4
    program                        shift and go to state 51
    construct                      shift and go to state 3

state 30

    (6) construct -> FOR ID . IN expression program ENDFOR
    (7) construct -> FOR ID . , ids IN expression program ENDFOR

    IN              shift and go to state 52
    ,               shift and go to state 53


state 31

    (19) expression -> NOT expression .
    (8) expression -> expression . . ID
    (12) expression -> expression . [ expression ]
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . AND expression
    (18) expression -> expression . OR expression
    (20) expression -> expression . % expression
    (23) expression -> expression . EQ expression
    (24) expression -> expression . NEQ expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LE expression
    (29) expression -> expression . ( )
    (30) expression -> expression . ( params )

    +               reduce using rule 19 (expression -> NOT expression .)
    -               reduce using rule 19 (expression -> NOT expression .)
    *               reduce using rule 19 (expression -> NOT expression .)
    /               reduce using rule 19 (expression -> NOT expression .)
    AND             reduce using rule 19 (expression -> NOT expression .)
    OR              reduce using rule 19 (expression -> NOT expression .)
    %               reduce using rule 19 (expression -> NOT expression .)
    EQ              reduce using rule 19 (expression -> NOT expression .)
    NEQ             reduce using rule 19 (expression -> NOT expression .)
    GT              reduce using rule 19 (expression -> NOT expression .)
    LT              reduce using rule 19 (expression -> NOT expression .)
    GE              reduce using rule 19 (expression -> NOT expression .)
    LE              reduce using rule 19 (expression -> NOT expression .)
    DATA            reduce using rule 19 (expression -> NOT expression .)
    IF              reduce using rule 19 (expression -> NOT expression .)
    FOR             reduce using rule 19 (expression -> NOT expression .)
    ID              reduce using rule 19 (expression -> NOT expression .)
    NOT             reduce using rule 19 (expression -> NOT expression .)
    NUMBER          reduce using rule 19 (expression -> NOT expression .)
    STRING          reduce using rule 19 (expression -> NOT expression .)
    $end            reduce using rule 19 (expression -> NOT expression .)
    ENDIF           reduce using rule 19 (expression -> NOT expression .)
    ENDFOR          reduce using rule 19 (expression -> NOT expression .)
    ]               reduce using rule 19 (expression -> NOT expression .)
    )               reduce using rule 19 (expression -> NOT expression .)
    ,               reduce using rule 19 (expression -> NOT expression .)
    .               shift and go to state 13
    [               shift and go to state 14
    (               shift and go to state 28

  ! .               [ reduce using rule 19 (expression -> NOT expression .) ]
  ! [               [ reduce using rule 19 (expression -> NOT expression .) ]
  ! (               [ reduce using rule 19 (expression -> NOT expression .) ]
  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 16 ]
  ! *               [ shift and go to state 17 ]
  ! /               [ shift and go to state 18 ]
  ! AND             [ shift and go to state 19 ]
  ! OR              [ shift and go to state 20 ]
  ! %               [ shift and go to state 21 ]
  ! EQ              [ shift and go to state 22 ]
  ! NEQ             [ shift and go to state 23 ]
  ! GT              [ shift and go to state 24 ]
  ! LT              [ shift and go to state 25 ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]


state 32

    (8) expression -> expression . ID .

    .               reduce using rule 8 (expression -> expression . ID .)
    [               reduce using rule 8 (expression -> expression . ID .)
    +               reduce using rule 8 (expression -> expression . ID .)
    -               reduce using rule 8 (expression -> expression . ID .)
    *               reduce using rule 8 (expression -> expression . ID .)
    /               reduce using rule 8 (expression -> expression . ID .)
    AND             reduce using rule 8 (expression -> expression . ID .)
    OR              reduce using rule 8 (expression -> expression . ID .)
    %               reduce using rule 8 (expression -> expression . ID .)
    EQ              reduce using rule 8 (expression -> expression . ID .)
    NEQ             reduce using rule 8 (expression -> expression . ID .)
    GT              reduce using rule 8 (expression -> expression . ID .)
    LT              reduce using rule 8 (expression -> expression . ID .)
    GE              reduce using rule 8 (expression -> expression . ID .)
    LE              reduce using rule 8 (expression -> expression . ID .)
    (               reduce using rule 8 (expression -> expression . ID .)
    DATA            reduce using rule 8 (expression -> expression . ID .)
    IF              reduce using rule 8 (expression -> expression . ID .)
    FOR             reduce using rule 8 (expression -> expression . ID .)
    ID              reduce using rule 8 (expression -> expression . ID .)
    NOT             reduce using rule 8 (expression -> expression . ID .)
    NUMBER          reduce using rule 8 (expression -> expression . ID .)
    STRING          reduce using rule 8 (expression -> expression . ID .)
    $end            reduce using rule 8 (expression -> expression . ID .)
    ENDIF           reduce using rule 8 (expression -> expression . ID .)
    ENDFOR          reduce using rule 8 (expression -> expression . ID .)
    ]               reduce using rule 8 (expression -> expression . ID .)
    )               reduce using rule 8 (expression -> expression . ID .)
    ,               reduce using rule 8 (expression -> expression . ID .)


state 33

    (12) expression -> expression [ expression . ]
    (8) expression -> expression . . ID
    (12) expression -> expression . [ expression ]
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . AND expression
    (18) expression -> expression . OR expression
    (20) expression -> expression . % expression
    (23) expression -> expression . EQ expression
    (24) expression -> expression . NEQ expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LE expression
    (29) expression -> expression . ( )
    (30) expression -> expression . ( params )

    ]               shift and go to state 54
    .               shift and go to state 13
    [               shift and go to state 14
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18
    AND             shift and go to state 19
    OR              shift and go to state 20
    %               shift and go to state 21
    EQ              shift and go to state 22
    NEQ             shift and go to state 23
    GT              shift and go to state 24
    LT              shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    (               shift and go to state 28


state 34

    (13) expression -> expression + expression .
    (8) expression -> expression . . ID
    (12) expression -> expression . [ expression ]
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . AND expression
    (18) expression -> expression . OR expression
    (20) expression -> expression . % expression
    (23) expression -> expression . EQ expression
    (24) expression -> expression . NEQ expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LE expression
    (29) expression -> expression . ( )
    (30) expression -> expression . ( params )

    +               reduce using rule 13 (expression -> expression + expression .)
    -               reduce using rule 13 (expression -> expression + expression .)
    AND             reduce using rule 13 (expression -> expression + expression .)
    OR              reduce using rule 13 (expression -> expression + expression .)
    EQ              reduce using rule 13 (expression -> expression + expression .)
    NEQ             reduce using rule 13 (expression -> expression + expression .)
    GT              reduce using rule 13 (expression -> expression + expression .)
    LT              reduce using rule 13 (expression -> expression + expression .)
    GE              reduce using rule 13 (expression -> expression + expression .)
    LE              reduce using rule 13 (expression -> expression + expression .)
    DATA            reduce using rule 13 (expression -> expression + expression .)
    IF              reduce using rule 13 (expression -> expression + expression .)
    FOR             reduce using rule 13 (expression -> expression + expression .)
    ID              reduce using rule 13 (expression -> expression + expression .)
    NOT             reduce using rule 13 (expression -> expression + expression .)
    NUMBER          reduce using rule 13 (expression -> expression + expression .)
    STRING          reduce using rule 13 (expression -> expression + expression .)
    $end            reduce using rule 13 (expression -> expression + expression .)
    ENDIF           reduce using rule 13 (expression -> expression + expression .)
    ENDFOR          reduce using rule 13 (expression -> expression + expression .)
    ]               reduce using rule 13 (expression -> expression + expression .)
    )               reduce using rule 13 (expression -> expression + expression .)
    ,               reduce using rule 13 (expression -> expression + expression .)
    .               shift and go to state 13
    [               shift and go to state 14
    *               shift and go to state 17
    /               shift and go to state 18
    %               shift and go to state 21
    (               shift and go to state 28

  ! .               [ reduce using rule 13 (expression -> expression + expression .) ]
  ! [               [ reduce using rule 13 (expression -> expression + expression .) ]
  ! *               [ reduce using rule 13 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 13 (expression -> expression + expression .) ]
  ! %               [ reduce using rule 13 (expression -> expression + expression .) ]
  ! (               [ reduce using rule 13 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 16 ]
  ! AND             [ shift and go to state 19 ]
  ! OR              [ shift and go to state 20 ]
  ! EQ              [ shift and go to state 22 ]
  ! NEQ             [ shift and go to state 23 ]
  ! GT              [ shift and go to state 24 ]
  ! LT              [ shift and go to state 25 ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]


state 35

    (14) expression -> expression - expression .
    (8) expression -> expression . . ID
    (12) expression -> expression . [ expression ]
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . AND expression
    (18) expression -> expression . OR expression
    (20) expression -> expression . % expression
    (23) expression -> expression . EQ expression
    (24) expression -> expression . NEQ expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LE expression
    (29) expression -> expression . ( )
    (30) expression -> expression . ( params )

    +               reduce using rule 14 (expression -> expression - expression .)
    -               reduce using rule 14 (expression -> expression - expression .)
    AND             reduce using rule 14 (expression -> expression - expression .)
    OR              reduce using rule 14 (expression -> expression - expression .)
    EQ              reduce using rule 14 (expression -> expression - expression .)
    NEQ             reduce using rule 14 (expression -> expression - expression .)
    GT              reduce using rule 14 (expression -> expression - expression .)
    LT              reduce using rule 14 (expression -> expression - expression .)
    GE              reduce using rule 14 (expression -> expression - expression .)
    LE              reduce using rule 14 (expression -> expression - expression .)
    DATA            reduce using rule 14 (expression -> expression - expression .)
    IF              reduce using rule 14 (expression -> expression - expression .)
    FOR             reduce using rule 14 (expression -> expression - expression .)
    ID              reduce using rule 14 (expression -> expression - expression .)
    NOT             reduce using rule 14 (expression -> expression - expression .)
    NUMBER          reduce using rule 14 (expression -> expression - expression .)
    STRING          reduce using rule 14 (expression -> expression - expression .)
    $end            reduce using rule 14 (expression -> expression - expression .)
    ENDIF           reduce using rule 14 (expression -> expression - expression .)
    ENDFOR          reduce using rule 14 (expression -> expression - expression .)
    ]               reduce using rule 14 (expression -> expression - expression .)
    )               reduce using rule 14 (expression -> expression - expression .)
    ,               reduce using rule 14 (expression -> expression - expression .)
    .               shift and go to state 13
    [               shift and go to state 14
    *               shift and go to state 17
    /               shift and go to state 18
    %               shift and go to state 21
    (               shift and go to state 28

  ! .               [ reduce using rule 14 (expression -> expression - expression .) ]
  ! [               [ reduce using rule 14 (expression -> expression - expression .) ]
  ! *               [ reduce using rule 14 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 14 (expression -> expression - expression .) ]
  ! %               [ reduce using rule 14 (expression -> expression - expression .) ]
  ! (               [ reduce using rule 14 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 16 ]
  ! AND             [ shift and go to state 19 ]
  ! OR              [ shift and go to state 20 ]
  ! EQ              [ shift and go to state 22 ]
  ! NEQ             [ shift and go to state 23 ]
  ! GT              [ shift and go to state 24 ]
  ! LT              [ shift and go to state 25 ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]


state 36

    (15) expression -> expression * expression .
    (8) expression -> expression . . ID
    (12) expression -> expression . [ expression ]
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . AND expression
    (18) expression -> expression . OR expression
    (20) expression -> expression . % expression
    (23) expression -> expression . EQ expression
    (24) expression -> expression . NEQ expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LE expression
    (29) expression -> expression . ( )
    (30) expression -> expression . ( params )

    +               reduce using rule 15 (expression -> expression * expression .)
    -               reduce using rule 15 (expression -> expression * expression .)
    *               reduce using rule 15 (expression -> expression * expression .)
    /               reduce using rule 15 (expression -> expression * expression .)
    AND             reduce using rule 15 (expression -> expression * expression .)
    OR              reduce using rule 15 (expression -> expression * expression .)
    %               reduce using rule 15 (expression -> expression * expression .)
    EQ              reduce using rule 15 (expression -> expression * expression .)
    NEQ             reduce using rule 15 (expression -> expression * expression .)
    GT              reduce using rule 15 (expression -> expression * expression .)
    LT              reduce using rule 15 (expression -> expression * expression .)
    GE              reduce using rule 15 (expression -> expression * expression .)
    LE              reduce using rule 15 (expression -> expression * expression .)
    DATA            reduce using rule 15 (expression -> expression * expression .)
    IF              reduce using rule 15 (expression -> expression * expression .)
    FOR             reduce using rule 15 (expression -> expression * expression .)
    ID              reduce using rule 15 (expression -> expression * expression .)
    NOT             reduce using rule 15 (expression -> expression * expression .)
    NUMBER          reduce using rule 15 (expression -> expression * expression .)
    STRING          reduce using rule 15 (expression -> expression * expression .)
    $end            reduce using rule 15 (expression -> expression * expression .)
    ENDIF           reduce using rule 15 (expression -> expression * expression .)
    ENDFOR          reduce using rule 15 (expression -> expression * expression .)
    ]               reduce using rule 15 (expression -> expression * expression .)
    )               reduce using rule 15 (expression -> expression * expression .)
    ,               reduce using rule 15 (expression -> expression * expression .)
    .               shift and go to state 13
    [               shift and go to state 14
    (               shift and go to state 28

  ! .               [ reduce using rule 15 (expression -> expression * expression .) ]
  ! [               [ reduce using rule 15 (expression -> expression * expression .) ]
  ! (               [ reduce using rule 15 (expression -> expression * expression .) ]
  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 16 ]
  ! *               [ shift and go to state 17 ]
  ! /               [ shift and go to state 18 ]
  ! AND             [ shift and go to state 19 ]
  ! OR              [ shift and go to state 20 ]
  ! %               [ shift and go to state 21 ]
  ! EQ              [ shift and go to state 22 ]
  ! NEQ             [ shift and go to state 23 ]
  ! GT              [ shift and go to state 24 ]
  ! LT              [ shift and go to state 25 ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]


state 37

    (16) expression -> expression / expression .
    (8) expression -> expression . . ID
    (12) expression -> expression . [ expression ]
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . AND expression
    (18) expression -> expression . OR expression
    (20) expression -> expression . % expression
    (23) expression -> expression . EQ expression
    (24) expression -> expression . NEQ expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LE expression
    (29) expression -> expression . ( )
    (30) expression -> expression . ( params )

    +               reduce using rule 16 (expression -> expression / expression .)
    -               reduce using rule 16 (expression -> expression / expression .)
    *               reduce using rule 16 (expression -> expression / expression .)
    /               reduce using rule 16 (expression -> expression / expression .)
    AND             reduce using rule 16 (expression -> expression / expression .)
    OR              reduce using rule 16 (expression -> expression / expression .)
    %               reduce using rule 16 (expression -> expression / expression .)
    EQ              reduce using rule 16 (expression -> expression / expression .)
    NEQ             reduce using rule 16 (expression -> expression / expression .)
    GT              reduce using rule 16 (expression -> expression / expression .)
    LT              reduce using rule 16 (expression -> expression / expression .)
    GE              reduce using rule 16 (expression -> expression / expression .)
    LE              reduce using rule 16 (expression -> expression / expression .)
    DATA            reduce using rule 16 (expression -> expression / expression .)
    IF              reduce using rule 16 (expression -> expression / expression .)
    FOR             reduce using rule 16 (expression -> expression / expression .)
    ID              reduce using rule 16 (expression -> expression / expression .)
    NOT             reduce using rule 16 (expression -> expression / expression .)
    NUMBER          reduce using rule 16 (expression -> expression / expression .)
    STRING          reduce using rule 16 (expression -> expression / expression .)
    $end            reduce using rule 16 (expression -> expression / expression .)
    ENDIF           reduce using rule 16 (expression -> expression / expression .)
    ENDFOR          reduce using rule 16 (expression -> expression / expression .)
    ]               reduce using rule 16 (expression -> expression / expression .)
    )               reduce using rule 16 (expression -> expression / expression .)
    ,               reduce using rule 16 (expression -> expression / expression .)
    .               shift and go to state 13
    [               shift and go to state 14
    (               shift and go to state 28

  ! .               [ reduce using rule 16 (expression -> expression / expression .) ]
  ! [               [ reduce using rule 16 (expression -> expression / expression .) ]
  ! (               [ reduce using rule 16 (expression -> expression / expression .) ]
  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 16 ]
  ! *               [ shift and go to state 17 ]
  ! /               [ shift and go to state 18 ]
  ! AND             [ shift and go to state 19 ]
  ! OR              [ shift and go to state 20 ]
  ! %               [ shift and go to state 21 ]
  ! EQ              [ shift and go to state 22 ]
  ! NEQ             [ shift and go to state 23 ]
  ! GT              [ shift and go to state 24 ]
  ! LT              [ shift and go to state 25 ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]


state 38

    (17) expression -> expression AND expression .
    (8) expression -> expression . . ID
    (12) expression -> expression . [ expression ]
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . AND expression
    (18) expression -> expression . OR expression
    (20) expression -> expression . % expression
    (23) expression -> expression . EQ expression
    (24) expression -> expression . NEQ expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LE expression
    (29) expression -> expression . ( )
    (30) expression -> expression . ( params )

    AND             reduce using rule 17 (expression -> expression AND expression .)
    OR              reduce using rule 17 (expression -> expression AND expression .)
    DATA            reduce using rule 17 (expression -> expression AND expression .)
    IF              reduce using rule 17 (expression -> expression AND expression .)
    FOR             reduce using rule 17 (expression -> expression AND expression .)
    ID              reduce using rule 17 (expression -> expression AND expression .)
    NOT             reduce using rule 17 (expression -> expression AND expression .)
    NUMBER          reduce using rule 17 (expression -> expression AND expression .)
    STRING          reduce using rule 17 (expression -> expression AND expression .)
    $end            reduce using rule 17 (expression -> expression AND expression .)
    ENDIF           reduce using rule 17 (expression -> expression AND expression .)
    ENDFOR          reduce using rule 17 (expression -> expression AND expression .)
    ]               reduce using rule 17 (expression -> expression AND expression .)
    )               reduce using rule 17 (expression -> expression AND expression .)
    ,               reduce using rule 17 (expression -> expression AND expression .)
    .               shift and go to state 13
    [               shift and go to state 14
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18
    %               shift and go to state 21
    EQ              shift and go to state 22
    NEQ             shift and go to state 23
    GT              shift and go to state 24
    LT              shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    (               shift and go to state 28

  ! .               [ reduce using rule 17 (expression -> expression AND expression .) ]
  ! [               [ reduce using rule 17 (expression -> expression AND expression .) ]
  ! +               [ reduce using rule 17 (expression -> expression AND expression .) ]
  ! -               [ reduce using rule 17 (expression -> expression AND expression .) ]
  ! *               [ reduce using rule 17 (expression -> expression AND expression .) ]
  ! /               [ reduce using rule 17 (expression -> expression AND expression .) ]
  ! %               [ reduce using rule 17 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 17 (expression -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 17 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 17 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 17 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 17 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 17 (expression -> expression AND expression .) ]
  ! (               [ reduce using rule 17 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 19 ]
  ! OR              [ shift and go to state 20 ]


state 39

    (18) expression -> expression OR expression .
    (8) expression -> expression . . ID
    (12) expression -> expression . [ expression ]
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . AND expression
    (18) expression -> expression . OR expression
    (20) expression -> expression . % expression
    (23) expression -> expression . EQ expression
    (24) expression -> expression . NEQ expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LE expression
    (29) expression -> expression . ( )
    (30) expression -> expression . ( params )

    AND             reduce using rule 18 (expression -> expression OR expression .)
    OR              reduce using rule 18 (expression -> expression OR expression .)
    DATA            reduce using rule 18 (expression -> expression OR expression .)
    IF              reduce using rule 18 (expression -> expression OR expression .)
    FOR             reduce using rule 18 (expression -> expression OR expression .)
    ID              reduce using rule 18 (expression -> expression OR expression .)
    NOT             reduce using rule 18 (expression -> expression OR expression .)
    NUMBER          reduce using rule 18 (expression -> expression OR expression .)
    STRING          reduce using rule 18 (expression -> expression OR expression .)
    $end            reduce using rule 18 (expression -> expression OR expression .)
    ENDIF           reduce using rule 18 (expression -> expression OR expression .)
    ENDFOR          reduce using rule 18 (expression -> expression OR expression .)
    ]               reduce using rule 18 (expression -> expression OR expression .)
    )               reduce using rule 18 (expression -> expression OR expression .)
    ,               reduce using rule 18 (expression -> expression OR expression .)
    .               shift and go to state 13
    [               shift and go to state 14
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18
    %               shift and go to state 21
    EQ              shift and go to state 22
    NEQ             shift and go to state 23
    GT              shift and go to state 24
    LT              shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    (               shift and go to state 28

  ! .               [ reduce using rule 18 (expression -> expression OR expression .) ]
  ! [               [ reduce using rule 18 (expression -> expression OR expression .) ]
  ! +               [ reduce using rule 18 (expression -> expression OR expression .) ]
  ! -               [ reduce using rule 18 (expression -> expression OR expression .) ]
  ! *               [ reduce using rule 18 (expression -> expression OR expression .) ]
  ! /               [ reduce using rule 18 (expression -> expression OR expression .) ]
  ! %               [ reduce using rule 18 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 18 (expression -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 18 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 18 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 18 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 18 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 18 (expression -> expression OR expression .) ]
  ! (               [ reduce using rule 18 (expression -> expression OR expression .) ]
  ! AND             [ shift and go to state 19 ]
  ! OR              [ shift and go to state 20 ]


state 40

    (20) expression -> expression % expression .
    (8) expression -> expression . . ID
    (12) expression -> expression . [ expression ]
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . AND expression
    (18) expression -> expression . OR expression
    (20) expression -> expression . % expression
    (23) expression -> expression . EQ expression
    (24) expression -> expression . NEQ expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LE expression
    (29) expression -> expression . ( )
    (30) expression -> expression . ( params )

    +               reduce using rule 20 (expression -> expression % expression .)
    -               reduce using rule 20 (expression -> expression % expression .)
    *               reduce using rule 20 (expression -> expression % expression .)
    /               reduce using rule 20 (expression -> expression % expression .)
    AND             reduce using rule 20 (expression -> expression % expression .)
    OR              reduce using rule 20 (expression -> expression % expression .)
    %               reduce using rule 20 (expression -> expression % expression .)
    EQ              reduce using rule 20 (expression -> expression % expression .)
    NEQ             reduce using rule 20 (expression -> expression % expression .)
    GT              reduce using rule 20 (expression -> expression % expression .)
    LT              reduce using rule 20 (expression -> expression % expression .)
    GE              reduce using rule 20 (expression -> expression % expression .)
    LE              reduce using rule 20 (expression -> expression % expression .)
    DATA            reduce using rule 20 (expression -> expression % expression .)
    IF              reduce using rule 20 (expression -> expression % expression .)
    FOR             reduce using rule 20 (expression -> expression % expression .)
    ID              reduce using rule 20 (expression -> expression % expression .)
    NOT             reduce using rule 20 (expression -> expression % expression .)
    NUMBER          reduce using rule 20 (expression -> expression % expression .)
    STRING          reduce using rule 20 (expression -> expression % expression .)
    $end            reduce using rule 20 (expression -> expression % expression .)
    ENDIF           reduce using rule 20 (expression -> expression % expression .)
    ENDFOR          reduce using rule 20 (expression -> expression % expression .)
    ]               reduce using rule 20 (expression -> expression % expression .)
    )               reduce using rule 20 (expression -> expression % expression .)
    ,               reduce using rule 20 (expression -> expression % expression .)
    .               shift and go to state 13
    [               shift and go to state 14
    (               shift and go to state 28

  ! .               [ reduce using rule 20 (expression -> expression % expression .) ]
  ! [               [ reduce using rule 20 (expression -> expression % expression .) ]
  ! (               [ reduce using rule 20 (expression -> expression % expression .) ]
  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 16 ]
  ! *               [ shift and go to state 17 ]
  ! /               [ shift and go to state 18 ]
  ! AND             [ shift and go to state 19 ]
  ! OR              [ shift and go to state 20 ]
  ! %               [ shift and go to state 21 ]
  ! EQ              [ shift and go to state 22 ]
  ! NEQ             [ shift and go to state 23 ]
  ! GT              [ shift and go to state 24 ]
  ! LT              [ shift and go to state 25 ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]


state 41

    (23) expression -> expression EQ expression .
    (8) expression -> expression . . ID
    (12) expression -> expression . [ expression ]
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . AND expression
    (18) expression -> expression . OR expression
    (20) expression -> expression . % expression
    (23) expression -> expression . EQ expression
    (24) expression -> expression . NEQ expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LE expression
    (29) expression -> expression . ( )
    (30) expression -> expression . ( params )

    AND             reduce using rule 23 (expression -> expression EQ expression .)
    OR              reduce using rule 23 (expression -> expression EQ expression .)
    EQ              reduce using rule 23 (expression -> expression EQ expression .)
    NEQ             reduce using rule 23 (expression -> expression EQ expression .)
    DATA            reduce using rule 23 (expression -> expression EQ expression .)
    IF              reduce using rule 23 (expression -> expression EQ expression .)
    FOR             reduce using rule 23 (expression -> expression EQ expression .)
    ID              reduce using rule 23 (expression -> expression EQ expression .)
    NOT             reduce using rule 23 (expression -> expression EQ expression .)
    NUMBER          reduce using rule 23 (expression -> expression EQ expression .)
    STRING          reduce using rule 23 (expression -> expression EQ expression .)
    $end            reduce using rule 23 (expression -> expression EQ expression .)
    ENDIF           reduce using rule 23 (expression -> expression EQ expression .)
    ENDFOR          reduce using rule 23 (expression -> expression EQ expression .)
    ]               reduce using rule 23 (expression -> expression EQ expression .)
    )               reduce using rule 23 (expression -> expression EQ expression .)
    ,               reduce using rule 23 (expression -> expression EQ expression .)
    .               shift and go to state 13
    [               shift and go to state 14
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18
    %               shift and go to state 21
    GT              shift and go to state 24
    LT              shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    (               shift and go to state 28

  ! .               [ reduce using rule 23 (expression -> expression EQ expression .) ]
  ! [               [ reduce using rule 23 (expression -> expression EQ expression .) ]
  ! +               [ reduce using rule 23 (expression -> expression EQ expression .) ]
  ! -               [ reduce using rule 23 (expression -> expression EQ expression .) ]
  ! *               [ reduce using rule 23 (expression -> expression EQ expression .) ]
  ! /               [ reduce using rule 23 (expression -> expression EQ expression .) ]
  ! %               [ reduce using rule 23 (expression -> expression EQ expression .) ]
  ! GT              [ reduce using rule 23 (expression -> expression EQ expression .) ]
  ! LT              [ reduce using rule 23 (expression -> expression EQ expression .) ]
  ! GE              [ reduce using rule 23 (expression -> expression EQ expression .) ]
  ! LE              [ reduce using rule 23 (expression -> expression EQ expression .) ]
  ! (               [ reduce using rule 23 (expression -> expression EQ expression .) ]
  ! AND             [ shift and go to state 19 ]
  ! OR              [ shift and go to state 20 ]
  ! EQ              [ shift and go to state 22 ]
  ! NEQ             [ shift and go to state 23 ]


state 42

    (24) expression -> expression NEQ expression .
    (8) expression -> expression . . ID
    (12) expression -> expression . [ expression ]
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . AND expression
    (18) expression -> expression . OR expression
    (20) expression -> expression . % expression
    (23) expression -> expression . EQ expression
    (24) expression -> expression . NEQ expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LE expression
    (29) expression -> expression . ( )
    (30) expression -> expression . ( params )

    AND             reduce using rule 24 (expression -> expression NEQ expression .)
    OR              reduce using rule 24 (expression -> expression NEQ expression .)
    EQ              reduce using rule 24 (expression -> expression NEQ expression .)
    NEQ             reduce using rule 24 (expression -> expression NEQ expression .)
    DATA            reduce using rule 24 (expression -> expression NEQ expression .)
    IF              reduce using rule 24 (expression -> expression NEQ expression .)
    FOR             reduce using rule 24 (expression -> expression NEQ expression .)
    ID              reduce using rule 24 (expression -> expression NEQ expression .)
    NOT             reduce using rule 24 (expression -> expression NEQ expression .)
    NUMBER          reduce using rule 24 (expression -> expression NEQ expression .)
    STRING          reduce using rule 24 (expression -> expression NEQ expression .)
    $end            reduce using rule 24 (expression -> expression NEQ expression .)
    ENDIF           reduce using rule 24 (expression -> expression NEQ expression .)
    ENDFOR          reduce using rule 24 (expression -> expression NEQ expression .)
    ]               reduce using rule 24 (expression -> expression NEQ expression .)
    )               reduce using rule 24 (expression -> expression NEQ expression .)
    ,               reduce using rule 24 (expression -> expression NEQ expression .)
    .               shift and go to state 13
    [               shift and go to state 14
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18
    %               shift and go to state 21
    GT              shift and go to state 24
    LT              shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    (               shift and go to state 28

  ! .               [ reduce using rule 24 (expression -> expression NEQ expression .) ]
  ! [               [ reduce using rule 24 (expression -> expression NEQ expression .) ]
  ! +               [ reduce using rule 24 (expression -> expression NEQ expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression NEQ expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression NEQ expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression NEQ expression .) ]
  ! %               [ reduce using rule 24 (expression -> expression NEQ expression .) ]
  ! GT              [ reduce using rule 24 (expression -> expression NEQ expression .) ]
  ! LT              [ reduce using rule 24 (expression -> expression NEQ expression .) ]
  ! GE              [ reduce using rule 24 (expression -> expression NEQ expression .) ]
  ! LE              [ reduce using rule 24 (expression -> expression NEQ expression .) ]
  ! (               [ reduce using rule 24 (expression -> expression NEQ expression .) ]
  ! AND             [ shift and go to state 19 ]
  ! OR              [ shift and go to state 20 ]
  ! EQ              [ shift and go to state 22 ]
  ! NEQ             [ shift and go to state 23 ]


state 43

    (25) expression -> expression GT expression .
    (8) expression -> expression . . ID
    (12) expression -> expression . [ expression ]
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . AND expression
    (18) expression -> expression . OR expression
    (20) expression -> expression . % expression
    (23) expression -> expression . EQ expression
    (24) expression -> expression . NEQ expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LE expression
    (29) expression -> expression . ( )
    (30) expression -> expression . ( params )

    AND             reduce using rule 25 (expression -> expression GT expression .)
    OR              reduce using rule 25 (expression -> expression GT expression .)
    EQ              reduce using rule 25 (expression -> expression GT expression .)
    NEQ             reduce using rule 25 (expression -> expression GT expression .)
    GT              reduce using rule 25 (expression -> expression GT expression .)
    LT              reduce using rule 25 (expression -> expression GT expression .)
    GE              reduce using rule 25 (expression -> expression GT expression .)
    LE              reduce using rule 25 (expression -> expression GT expression .)
    DATA            reduce using rule 25 (expression -> expression GT expression .)
    IF              reduce using rule 25 (expression -> expression GT expression .)
    FOR             reduce using rule 25 (expression -> expression GT expression .)
    ID              reduce using rule 25 (expression -> expression GT expression .)
    NOT             reduce using rule 25 (expression -> expression GT expression .)
    NUMBER          reduce using rule 25 (expression -> expression GT expression .)
    STRING          reduce using rule 25 (expression -> expression GT expression .)
    $end            reduce using rule 25 (expression -> expression GT expression .)
    ENDIF           reduce using rule 25 (expression -> expression GT expression .)
    ENDFOR          reduce using rule 25 (expression -> expression GT expression .)
    ]               reduce using rule 25 (expression -> expression GT expression .)
    )               reduce using rule 25 (expression -> expression GT expression .)
    ,               reduce using rule 25 (expression -> expression GT expression .)
    .               shift and go to state 13
    [               shift and go to state 14
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18
    %               shift and go to state 21
    (               shift and go to state 28

  ! .               [ reduce using rule 25 (expression -> expression GT expression .) ]
  ! [               [ reduce using rule 25 (expression -> expression GT expression .) ]
  ! +               [ reduce using rule 25 (expression -> expression GT expression .) ]
  ! -               [ reduce using rule 25 (expression -> expression GT expression .) ]
  ! *               [ reduce using rule 25 (expression -> expression GT expression .) ]
  ! /               [ reduce using rule 25 (expression -> expression GT expression .) ]
  ! %               [ reduce using rule 25 (expression -> expression GT expression .) ]
  ! (               [ reduce using rule 25 (expression -> expression GT expression .) ]
  ! AND             [ shift and go to state 19 ]
  ! OR              [ shift and go to state 20 ]
  ! EQ              [ shift and go to state 22 ]
  ! NEQ             [ shift and go to state 23 ]
  ! GT              [ shift and go to state 24 ]
  ! LT              [ shift and go to state 25 ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]


state 44

    (26) expression -> expression LT expression .
    (8) expression -> expression . . ID
    (12) expression -> expression . [ expression ]
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . AND expression
    (18) expression -> expression . OR expression
    (20) expression -> expression . % expression
    (23) expression -> expression . EQ expression
    (24) expression -> expression . NEQ expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LE expression
    (29) expression -> expression . ( )
    (30) expression -> expression . ( params )

    AND             reduce using rule 26 (expression -> expression LT expression .)
    OR              reduce using rule 26 (expression -> expression LT expression .)
    EQ              reduce using rule 26 (expression -> expression LT expression .)
    NEQ             reduce using rule 26 (expression -> expression LT expression .)
    GT              reduce using rule 26 (expression -> expression LT expression .)
    LT              reduce using rule 26 (expression -> expression LT expression .)
    GE              reduce using rule 26 (expression -> expression LT expression .)
    LE              reduce using rule 26 (expression -> expression LT expression .)
    DATA            reduce using rule 26 (expression -> expression LT expression .)
    IF              reduce using rule 26 (expression -> expression LT expression .)
    FOR             reduce using rule 26 (expression -> expression LT expression .)
    ID              reduce using rule 26 (expression -> expression LT expression .)
    NOT             reduce using rule 26 (expression -> expression LT expression .)
    NUMBER          reduce using rule 26 (expression -> expression LT expression .)
    STRING          reduce using rule 26 (expression -> expression LT expression .)
    $end            reduce using rule 26 (expression -> expression LT expression .)
    ENDIF           reduce using rule 26 (expression -> expression LT expression .)
    ENDFOR          reduce using rule 26 (expression -> expression LT expression .)
    ]               reduce using rule 26 (expression -> expression LT expression .)
    )               reduce using rule 26 (expression -> expression LT expression .)
    ,               reduce using rule 26 (expression -> expression LT expression .)
    .               shift and go to state 13
    [               shift and go to state 14
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18
    %               shift and go to state 21
    (               shift and go to state 28

  ! .               [ reduce using rule 26 (expression -> expression LT expression .) ]
  ! [               [ reduce using rule 26 (expression -> expression LT expression .) ]
  ! +               [ reduce using rule 26 (expression -> expression LT expression .) ]
  ! -               [ reduce using rule 26 (expression -> expression LT expression .) ]
  ! *               [ reduce using rule 26 (expression -> expression LT expression .) ]
  ! /               [ reduce using rule 26 (expression -> expression LT expression .) ]
  ! %               [ reduce using rule 26 (expression -> expression LT expression .) ]
  ! (               [ reduce using rule 26 (expression -> expression LT expression .) ]
  ! AND             [ shift and go to state 19 ]
  ! OR              [ shift and go to state 20 ]
  ! EQ              [ shift and go to state 22 ]
  ! NEQ             [ shift and go to state 23 ]
  ! GT              [ shift and go to state 24 ]
  ! LT              [ shift and go to state 25 ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]


state 45

    (27) expression -> expression GE expression .
    (8) expression -> expression . . ID
    (12) expression -> expression . [ expression ]
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . AND expression
    (18) expression -> expression . OR expression
    (20) expression -> expression . % expression
    (23) expression -> expression . EQ expression
    (24) expression -> expression . NEQ expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LE expression
    (29) expression -> expression . ( )
    (30) expression -> expression . ( params )

    AND             reduce using rule 27 (expression -> expression GE expression .)
    OR              reduce using rule 27 (expression -> expression GE expression .)
    EQ              reduce using rule 27 (expression -> expression GE expression .)
    NEQ             reduce using rule 27 (expression -> expression GE expression .)
    GT              reduce using rule 27 (expression -> expression GE expression .)
    LT              reduce using rule 27 (expression -> expression GE expression .)
    GE              reduce using rule 27 (expression -> expression GE expression .)
    LE              reduce using rule 27 (expression -> expression GE expression .)
    DATA            reduce using rule 27 (expression -> expression GE expression .)
    IF              reduce using rule 27 (expression -> expression GE expression .)
    FOR             reduce using rule 27 (expression -> expression GE expression .)
    ID              reduce using rule 27 (expression -> expression GE expression .)
    NOT             reduce using rule 27 (expression -> expression GE expression .)
    NUMBER          reduce using rule 27 (expression -> expression GE expression .)
    STRING          reduce using rule 27 (expression -> expression GE expression .)
    $end            reduce using rule 27 (expression -> expression GE expression .)
    ENDIF           reduce using rule 27 (expression -> expression GE expression .)
    ENDFOR          reduce using rule 27 (expression -> expression GE expression .)
    ]               reduce using rule 27 (expression -> expression GE expression .)
    )               reduce using rule 27 (expression -> expression GE expression .)
    ,               reduce using rule 27 (expression -> expression GE expression .)
    .               shift and go to state 13
    [               shift and go to state 14
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18
    %               shift and go to state 21
    (               shift and go to state 28

  ! .               [ reduce using rule 27 (expression -> expression GE expression .) ]
  ! [               [ reduce using rule 27 (expression -> expression GE expression .) ]
  ! +               [ reduce using rule 27 (expression -> expression GE expression .) ]
  ! -               [ reduce using rule 27 (expression -> expression GE expression .) ]
  ! *               [ reduce using rule 27 (expression -> expression GE expression .) ]
  ! /               [ reduce using rule 27 (expression -> expression GE expression .) ]
  ! %               [ reduce using rule 27 (expression -> expression GE expression .) ]
  ! (               [ reduce using rule 27 (expression -> expression GE expression .) ]
  ! AND             [ shift and go to state 19 ]
  ! OR              [ shift and go to state 20 ]
  ! EQ              [ shift and go to state 22 ]
  ! NEQ             [ shift and go to state 23 ]
  ! GT              [ shift and go to state 24 ]
  ! LT              [ shift and go to state 25 ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]


state 46

    (28) expression -> expression LE expression .
    (8) expression -> expression . . ID
    (12) expression -> expression . [ expression ]
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . AND expression
    (18) expression -> expression . OR expression
    (20) expression -> expression . % expression
    (23) expression -> expression . EQ expression
    (24) expression -> expression . NEQ expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LE expression
    (29) expression -> expression . ( )
    (30) expression -> expression . ( params )

    AND             reduce using rule 28 (expression -> expression LE expression .)
    OR              reduce using rule 28 (expression -> expression LE expression .)
    EQ              reduce using rule 28 (expression -> expression LE expression .)
    NEQ             reduce using rule 28 (expression -> expression LE expression .)
    GT              reduce using rule 28 (expression -> expression LE expression .)
    LT              reduce using rule 28 (expression -> expression LE expression .)
    GE              reduce using rule 28 (expression -> expression LE expression .)
    LE              reduce using rule 28 (expression -> expression LE expression .)
    DATA            reduce using rule 28 (expression -> expression LE expression .)
    IF              reduce using rule 28 (expression -> expression LE expression .)
    FOR             reduce using rule 28 (expression -> expression LE expression .)
    ID              reduce using rule 28 (expression -> expression LE expression .)
    NOT             reduce using rule 28 (expression -> expression LE expression .)
    NUMBER          reduce using rule 28 (expression -> expression LE expression .)
    STRING          reduce using rule 28 (expression -> expression LE expression .)
    $end            reduce using rule 28 (expression -> expression LE expression .)
    ENDIF           reduce using rule 28 (expression -> expression LE expression .)
    ENDFOR          reduce using rule 28 (expression -> expression LE expression .)
    ]               reduce using rule 28 (expression -> expression LE expression .)
    )               reduce using rule 28 (expression -> expression LE expression .)
    ,               reduce using rule 28 (expression -> expression LE expression .)
    .               shift and go to state 13
    [               shift and go to state 14
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18
    %               shift and go to state 21
    (               shift and go to state 28

  ! .               [ reduce using rule 28 (expression -> expression LE expression .) ]
  ! [               [ reduce using rule 28 (expression -> expression LE expression .) ]
  ! +               [ reduce using rule 28 (expression -> expression LE expression .) ]
  ! -               [ reduce using rule 28 (expression -> expression LE expression .) ]
  ! *               [ reduce using rule 28 (expression -> expression LE expression .) ]
  ! /               [ reduce using rule 28 (expression -> expression LE expression .) ]
  ! %               [ reduce using rule 28 (expression -> expression LE expression .) ]
  ! (               [ reduce using rule 28 (expression -> expression LE expression .) ]
  ! AND             [ shift and go to state 19 ]
  ! OR              [ shift and go to state 20 ]
  ! EQ              [ shift and go to state 22 ]
  ! NEQ             [ shift and go to state 23 ]
  ! GT              [ shift and go to state 24 ]
  ! LT              [ shift and go to state 25 ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]


state 47

    (33) param -> expression .
    (8) expression -> expression . . ID
    (12) expression -> expression . [ expression ]
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . AND expression
    (18) expression -> expression . OR expression
    (20) expression -> expression . % expression
    (23) expression -> expression . EQ expression
    (24) expression -> expression . NEQ expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LE expression
    (29) expression -> expression . ( )
    (30) expression -> expression . ( params )

    )               reduce using rule 33 (param -> expression .)
    ,               reduce using rule 33 (param -> expression .)
    .               shift and go to state 13
    [               shift and go to state 14
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18
    AND             shift and go to state 19
    OR              shift and go to state 20
    %               shift and go to state 21
    EQ              shift and go to state 22
    NEQ             shift and go to state 23
    GT              shift and go to state 24
    LT              shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    (               shift and go to state 28


state 48

    (29) expression -> expression ( ) .

    .               reduce using rule 29 (expression -> expression ( ) .)
    [               reduce using rule 29 (expression -> expression ( ) .)
    +               reduce using rule 29 (expression -> expression ( ) .)
    -               reduce using rule 29 (expression -> expression ( ) .)
    *               reduce using rule 29 (expression -> expression ( ) .)
    /               reduce using rule 29 (expression -> expression ( ) .)
    AND             reduce using rule 29 (expression -> expression ( ) .)
    OR              reduce using rule 29 (expression -> expression ( ) .)
    %               reduce using rule 29 (expression -> expression ( ) .)
    EQ              reduce using rule 29 (expression -> expression ( ) .)
    NEQ             reduce using rule 29 (expression -> expression ( ) .)
    GT              reduce using rule 29 (expression -> expression ( ) .)
    LT              reduce using rule 29 (expression -> expression ( ) .)
    GE              reduce using rule 29 (expression -> expression ( ) .)
    LE              reduce using rule 29 (expression -> expression ( ) .)
    (               reduce using rule 29 (expression -> expression ( ) .)
    DATA            reduce using rule 29 (expression -> expression ( ) .)
    IF              reduce using rule 29 (expression -> expression ( ) .)
    FOR             reduce using rule 29 (expression -> expression ( ) .)
    ID              reduce using rule 29 (expression -> expression ( ) .)
    NOT             reduce using rule 29 (expression -> expression ( ) .)
    NUMBER          reduce using rule 29 (expression -> expression ( ) .)
    STRING          reduce using rule 29 (expression -> expression ( ) .)
    $end            reduce using rule 29 (expression -> expression ( ) .)
    ENDIF           reduce using rule 29 (expression -> expression ( ) .)
    ENDFOR          reduce using rule 29 (expression -> expression ( ) .)
    ]               reduce using rule 29 (expression -> expression ( ) .)
    )               reduce using rule 29 (expression -> expression ( ) .)
    ,               reduce using rule 29 (expression -> expression ( ) .)


state 49

    (30) expression -> expression ( params . )
    (32) params -> params . , param

    )               shift and go to state 55
    ,               shift and go to state 56


state 50

    (31) params -> param .

    )               reduce using rule 31 (params -> param .)
    ,               reduce using rule 31 (params -> param .)


state 51

    (5) construct -> IF expression program . ENDIF

    ENDIF           shift and go to state 57


state 52

    (6) construct -> FOR ID IN . expression program ENDFOR
    (8) expression -> . expression . ID
    (9) expression -> . ID
    (12) expression -> . expression [ expression ]
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression AND expression
    (18) expression -> . expression OR expression
    (19) expression -> . NOT expression
    (20) expression -> . expression % expression
    (21) expression -> . NUMBER
    (22) expression -> . STRING
    (23) expression -> . expression EQ expression
    (24) expression -> . expression NEQ expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LE expression
    (29) expression -> . expression ( )
    (30) expression -> . expression ( params )

    ID              shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 58

state 53

    (7) construct -> FOR ID , . ids IN expression program ENDFOR
    (10) ids -> . ID
    (11) ids -> . ids , ID

    ID              shift and go to state 59

    ids                            shift and go to state 60

state 54

    (12) expression -> expression [ expression ] .

    .               reduce using rule 12 (expression -> expression [ expression ] .)
    [               reduce using rule 12 (expression -> expression [ expression ] .)
    +               reduce using rule 12 (expression -> expression [ expression ] .)
    -               reduce using rule 12 (expression -> expression [ expression ] .)
    *               reduce using rule 12 (expression -> expression [ expression ] .)
    /               reduce using rule 12 (expression -> expression [ expression ] .)
    AND             reduce using rule 12 (expression -> expression [ expression ] .)
    OR              reduce using rule 12 (expression -> expression [ expression ] .)
    %               reduce using rule 12 (expression -> expression [ expression ] .)
    EQ              reduce using rule 12 (expression -> expression [ expression ] .)
    NEQ             reduce using rule 12 (expression -> expression [ expression ] .)
    GT              reduce using rule 12 (expression -> expression [ expression ] .)
    LT              reduce using rule 12 (expression -> expression [ expression ] .)
    GE              reduce using rule 12 (expression -> expression [ expression ] .)
    LE              reduce using rule 12 (expression -> expression [ expression ] .)
    (               reduce using rule 12 (expression -> expression [ expression ] .)
    DATA            reduce using rule 12 (expression -> expression [ expression ] .)
    IF              reduce using rule 12 (expression -> expression [ expression ] .)
    FOR             reduce using rule 12 (expression -> expression [ expression ] .)
    ID              reduce using rule 12 (expression -> expression [ expression ] .)
    NOT             reduce using rule 12 (expression -> expression [ expression ] .)
    NUMBER          reduce using rule 12 (expression -> expression [ expression ] .)
    STRING          reduce using rule 12 (expression -> expression [ expression ] .)
    $end            reduce using rule 12 (expression -> expression [ expression ] .)
    ENDIF           reduce using rule 12 (expression -> expression [ expression ] .)
    ENDFOR          reduce using rule 12 (expression -> expression [ expression ] .)
    ]               reduce using rule 12 (expression -> expression [ expression ] .)
    )               reduce using rule 12 (expression -> expression [ expression ] .)
    ,               reduce using rule 12 (expression -> expression [ expression ] .)


state 55

    (30) expression -> expression ( params ) .

    .               reduce using rule 30 (expression -> expression ( params ) .)
    [               reduce using rule 30 (expression -> expression ( params ) .)
    +               reduce using rule 30 (expression -> expression ( params ) .)
    -               reduce using rule 30 (expression -> expression ( params ) .)
    *               reduce using rule 30 (expression -> expression ( params ) .)
    /               reduce using rule 30 (expression -> expression ( params ) .)
    AND             reduce using rule 30 (expression -> expression ( params ) .)
    OR              reduce using rule 30 (expression -> expression ( params ) .)
    %               reduce using rule 30 (expression -> expression ( params ) .)
    EQ              reduce using rule 30 (expression -> expression ( params ) .)
    NEQ             reduce using rule 30 (expression -> expression ( params ) .)
    GT              reduce using rule 30 (expression -> expression ( params ) .)
    LT              reduce using rule 30 (expression -> expression ( params ) .)
    GE              reduce using rule 30 (expression -> expression ( params ) .)
    LE              reduce using rule 30 (expression -> expression ( params ) .)
    (               reduce using rule 30 (expression -> expression ( params ) .)
    DATA            reduce using rule 30 (expression -> expression ( params ) .)
    IF              reduce using rule 30 (expression -> expression ( params ) .)
    FOR             reduce using rule 30 (expression -> expression ( params ) .)
    ID              reduce using rule 30 (expression -> expression ( params ) .)
    NOT             reduce using rule 30 (expression -> expression ( params ) .)
    NUMBER          reduce using rule 30 (expression -> expression ( params ) .)
    STRING          reduce using rule 30 (expression -> expression ( params ) .)
    $end            reduce using rule 30 (expression -> expression ( params ) .)
    ENDIF           reduce using rule 30 (expression -> expression ( params ) .)
    ENDFOR          reduce using rule 30 (expression -> expression ( params ) .)
    ]               reduce using rule 30 (expression -> expression ( params ) .)
    )               reduce using rule 30 (expression -> expression ( params ) .)
    ,               reduce using rule 30 (expression -> expression ( params ) .)


state 56

    (32) params -> params , . param
    (33) param -> . expression
    (8) expression -> . expression . ID
    (9) expression -> . ID
    (12) expression -> . expression [ expression ]
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression AND expression
    (18) expression -> . expression OR expression
    (19) expression -> . NOT expression
    (20) expression -> . expression % expression
    (21) expression -> . NUMBER
    (22) expression -> . STRING
    (23) expression -> . expression EQ expression
    (24) expression -> . expression NEQ expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LE expression
    (29) expression -> . expression ( )
    (30) expression -> . expression ( params )

    ID              shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    STRING          shift and go to state 10

    param                          shift and go to state 61
    expression                     shift and go to state 47

state 57

    (5) construct -> IF expression program ENDIF .

    DATA            reduce using rule 5 (construct -> IF expression program ENDIF .)
    IF              reduce using rule 5 (construct -> IF expression program ENDIF .)
    FOR             reduce using rule 5 (construct -> IF expression program ENDIF .)
    ID              reduce using rule 5 (construct -> IF expression program ENDIF .)
    NOT             reduce using rule 5 (construct -> IF expression program ENDIF .)
    NUMBER          reduce using rule 5 (construct -> IF expression program ENDIF .)
    STRING          reduce using rule 5 (construct -> IF expression program ENDIF .)
    $end            reduce using rule 5 (construct -> IF expression program ENDIF .)
    ENDIF           reduce using rule 5 (construct -> IF expression program ENDIF .)
    ENDFOR          reduce using rule 5 (construct -> IF expression program ENDIF .)


state 58

    (6) construct -> FOR ID IN expression . program ENDFOR
    (8) expression -> expression . . ID
    (12) expression -> expression . [ expression ]
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . AND expression
    (18) expression -> expression . OR expression
    (20) expression -> expression . % expression
    (23) expression -> expression . EQ expression
    (24) expression -> expression . NEQ expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LE expression
    (29) expression -> expression . ( )
    (30) expression -> expression . ( params )
    (1) program -> . DATA program
    (2) program -> . construct program
    (3) program -> .
    (4) construct -> . expression
    (5) construct -> . IF expression program ENDIF
    (6) construct -> . FOR ID IN expression program ENDFOR
    (7) construct -> . FOR ID , ids IN expression program ENDFOR
    (8) expression -> . expression . ID
    (9) expression -> . ID
    (12) expression -> . expression [ expression ]
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression AND expression
    (18) expression -> . expression OR expression
    (19) expression -> . NOT expression
    (20) expression -> . expression % expression
    (21) expression -> . NUMBER
    (22) expression -> . STRING
    (23) expression -> . expression EQ expression
    (24) expression -> . expression NEQ expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LE expression
    (29) expression -> . expression ( )
    (30) expression -> . expression ( params )

    .               shift and go to state 13
    [               shift and go to state 14
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18
    AND             shift and go to state 19
    OR              shift and go to state 20
    %               shift and go to state 21
    EQ              shift and go to state 22
    NEQ             shift and go to state 23
    GT              shift and go to state 24
    LT              shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    (               shift and go to state 28
    DATA            shift and go to state 2
    ENDFOR          reduce using rule 3 (program -> .)
    IF              shift and go to state 5
    FOR             shift and go to state 6
    ID              shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 4
    program                        shift and go to state 62
    construct                      shift and go to state 3

state 59

    (10) ids -> ID .

    IN              reduce using rule 10 (ids -> ID .)
    ,               reduce using rule 10 (ids -> ID .)


state 60

    (7) construct -> FOR ID , ids . IN expression program ENDFOR
    (11) ids -> ids . , ID

    IN              shift and go to state 64
    ,               shift and go to state 63


state 61

    (32) params -> params , param .

    )               reduce using rule 32 (params -> params , param .)
    ,               reduce using rule 32 (params -> params , param .)


state 62

    (6) construct -> FOR ID IN expression program . ENDFOR

    ENDFOR          shift and go to state 65


state 63

    (11) ids -> ids , . ID

    ID              shift and go to state 66


state 64

    (7) construct -> FOR ID , ids IN . expression program ENDFOR
    (8) expression -> . expression . ID
    (9) expression -> . ID
    (12) expression -> . expression [ expression ]
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression AND expression
    (18) expression -> . expression OR expression
    (19) expression -> . NOT expression
    (20) expression -> . expression % expression
    (21) expression -> . NUMBER
    (22) expression -> . STRING
    (23) expression -> . expression EQ expression
    (24) expression -> . expression NEQ expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LE expression
    (29) expression -> . expression ( )
    (30) expression -> . expression ( params )

    ID              shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 67

state 65

    (6) construct -> FOR ID IN expression program ENDFOR .

    DATA            reduce using rule 6 (construct -> FOR ID IN expression program ENDFOR .)
    IF              reduce using rule 6 (construct -> FOR ID IN expression program ENDFOR .)
    FOR             reduce using rule 6 (construct -> FOR ID IN expression program ENDFOR .)
    ID              reduce using rule 6 (construct -> FOR ID IN expression program ENDFOR .)
    NOT             reduce using rule 6 (construct -> FOR ID IN expression program ENDFOR .)
    NUMBER          reduce using rule 6 (construct -> FOR ID IN expression program ENDFOR .)
    STRING          reduce using rule 6 (construct -> FOR ID IN expression program ENDFOR .)
    $end            reduce using rule 6 (construct -> FOR ID IN expression program ENDFOR .)
    ENDIF           reduce using rule 6 (construct -> FOR ID IN expression program ENDFOR .)
    ENDFOR          reduce using rule 6 (construct -> FOR ID IN expression program ENDFOR .)


state 66

    (11) ids -> ids , ID .

    IN              reduce using rule 11 (ids -> ids , ID .)
    ,               reduce using rule 11 (ids -> ids , ID .)


state 67

    (7) construct -> FOR ID , ids IN expression . program ENDFOR
    (8) expression -> expression . . ID
    (12) expression -> expression . [ expression ]
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . AND expression
    (18) expression -> expression . OR expression
    (20) expression -> expression . % expression
    (23) expression -> expression . EQ expression
    (24) expression -> expression . NEQ expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LE expression
    (29) expression -> expression . ( )
    (30) expression -> expression . ( params )
    (1) program -> . DATA program
    (2) program -> . construct program
    (3) program -> .
    (4) construct -> . expression
    (5) construct -> . IF expression program ENDIF
    (6) construct -> . FOR ID IN expression program ENDFOR
    (7) construct -> . FOR ID , ids IN expression program ENDFOR
    (8) expression -> . expression . ID
    (9) expression -> . ID
    (12) expression -> . expression [ expression ]
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression AND expression
    (18) expression -> . expression OR expression
    (19) expression -> . NOT expression
    (20) expression -> . expression % expression
    (21) expression -> . NUMBER
    (22) expression -> . STRING
    (23) expression -> . expression EQ expression
    (24) expression -> . expression NEQ expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LE expression
    (29) expression -> . expression ( )
    (30) expression -> . expression ( params )

    .               shift and go to state 13
    [               shift and go to state 14
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18
    AND             shift and go to state 19
    OR              shift and go to state 20
    %               shift and go to state 21
    EQ              shift and go to state 22
    NEQ             shift and go to state 23
    GT              shift and go to state 24
    LT              shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    (               shift and go to state 28
    DATA            shift and go to state 2
    ENDFOR          reduce using rule 3 (program -> .)
    IF              shift and go to state 5
    FOR             shift and go to state 6
    ID              shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    STRING          shift and go to state 10

    expression                     shift and go to state 4
    program                        shift and go to state 68
    construct                      shift and go to state 3

state 68

    (7) construct -> FOR ID , ids IN expression program . ENDFOR

    ENDFOR          shift and go to state 69


state 69

    (7) construct -> FOR ID , ids IN expression program ENDFOR .

    DATA            reduce using rule 7 (construct -> FOR ID , ids IN expression program ENDFOR .)
    IF              reduce using rule 7 (construct -> FOR ID , ids IN expression program ENDFOR .)
    FOR             reduce using rule 7 (construct -> FOR ID , ids IN expression program ENDFOR .)
    ID              reduce using rule 7 (construct -> FOR ID , ids IN expression program ENDFOR .)
    NOT             reduce using rule 7 (construct -> FOR ID , ids IN expression program ENDFOR .)
    NUMBER          reduce using rule 7 (construct -> FOR ID , ids IN expression program ENDFOR .)
    STRING          reduce using rule 7 (construct -> FOR ID , ids IN expression program ENDFOR .)
    $end            reduce using rule 7 (construct -> FOR ID , ids IN expression program ENDFOR .)
    ENDIF           reduce using rule 7 (construct -> FOR ID , ids IN expression program ENDFOR .)
    ENDFOR          reduce using rule 7 (construct -> FOR ID , ids IN expression program ENDFOR .)

